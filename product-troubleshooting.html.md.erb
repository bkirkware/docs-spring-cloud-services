---
title: Troubleshooting Pivotal Spring Cloud Services
owner: Spring Cloud Services
---

<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }

    .note.warning:before {
        color: #f99;
     }
</style>

See below for information about problems related to your [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) platform configuration or Spring Cloud Services or other product installation.

## <a id="1-5-config-server-using-encryption"></a>Spring Cloud Services 1.5.x Config Server using encryption key cannot be upgraded to 2.1.x

If you have a Config Server service instance created in Spring Cloud Services 1.5.x and configured to use an encryption key, you cannot upgrade the Config Server service instance to Spring Cloud Services 2.1.x without updating its configuration first to supply its encryption key with newlines escaped as `\n` (not removed). In Spring Cloud Services 1.5.x, the encryption key must have newlines removed, but in Spring Cloud Services 2.1.x, the newlines must be escaped instead. This is due to a difference in underlying Spring Boot versions in Spring Cloud Services 1.5.x and 2.1.x.

See [Encryption and Encrypted Values](./common/config-server/configuring-with-git.html#encryption-and-encrypted-values) in the Config Server documentation for more information about configuring a Config Server service instance to use an encryption key.

## <a id="rabbitmq-plan-missing"></a>"java.lang.IllegalArgumentException: Service plan standard not found"

The `p-circuit-breaker-dashboard` service in Spring Cloud Services requires that [RabbitMQ for PCF](https://docs.pivotal.io/rabbitmq-cf/) is configured to deploy the [Pre-provisioned broker](https://docs.pivotal.io/rabbitmq-cf/1-15/index.html#pre-provisioned). If the `run_tests` errand or create and update service fails with a message similar to following:

```
Showing status of last operation from service test-p-circuit-breaker-dashboard-*********...

status:    create failed
message:   Error creating service instance: java.lang.IllegalArgumentException: Service plan standard not found
```

Enable the [Pre-provisioned broker](https://docs.pivotal.io/rabbitmq-cf/1-15/index.html#pre-provisioned) as described in the RabbitMQ for PCF documentation.

## <a id="timeout-exception-180000-ms"></a>"java.util.concurrent.TimeoutException: Execution took longer than 180000 MILLISECONDS"

If the broker fails to provision a service instance and the logs for the `spring-cloud-broker-worker` app (see [Read Broker Application Logs](./service-broker.html#broker-application-logs)) contain the following:

```
java.util.concurrent.TimeoutException: Execution took longer than 180000 MILLISECONDS
```

This is due to a problem encountered during app deployments to your PCF foundation. Verify that you can deploy apps without issues to your PCF foundation (see ["Starting or staging an application results in an InsufficientResources error"](https://community.pivotal.io/s/article/Starting-or-Staging-an-Application-Results-in-an-Insufficient-Resources-Error) in the PCF Knowledge Base).

## <a id="service-registry-authentication-failed"></a>Service Registry: "Authentication Failed: Could not obtain access token"

If you encounter a message similar to the following when attempting to access a Service Registry dashboard:

<%= image_tag("./images/sr-authentication-failed.png") %>

with the following text:

> **401 (Unauthorized)**

> Authentication Failed: Could not obtain access token

If your PCF foundation is using a self-signed certificate, ensure that it includes all of the domains listed in [Requirements](./common/index.html#requirements). If you update the certificate, you will need to either restart the service instance's backing app(s) or recreate the service instance. Otherwise you may continue to see this message and be unable to access the Service Registry dashboard.

## <a id="no-san-matching"></a>"No subject alternative DNS name matching p-spring-cloud-services.uaa.example.com found"

If you encounter an exception message similar to the following:

```
org.springframework.web.client.ResourceAccessException: I/O error on POST request for
"https://p-spring-cloud-services.uaa.example.com/oauth/token":
java.security.cert.CertificateException: No subject alternative DNS name matching
p-spring-cloud-services.uaa.example.com found.; nested exception is
javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No
subject alternative DNS name matching p-spring-cloud-services.uaa.example.com found.
```

Ensure that your Pivotal Application Service (PAS) or Elastic Runtime SSL certificate is configured as described in [Requirements](./common/index.html#requirements). Be sure that the certificate includes all wildcards listed in that section and has a separate wildcard for each subdomain.

## <a id="protocol-version"></a>"javax.net.ssl.SSLException: Received fatal alert: protocol_version"

The Cloud Foundry Command Line Interface tool (cf CLI) `create-service` command may return an error similar to the following:

```
Server error, status code: 502, error code: 10001, message: Service broker error:
javax.net.ssl.SSLException: Received fatal alert: protocol_version
```

Spring Cloud Services requires the [RabbitMQ for PCF](https://network.pivotal.io/products/pivotal-rabbitmq-service) product. If you have provided SSL certificates and keys to RabbitMQ for PCF, you must also enable its TLS 1.0 support in order to use it with Spring Cloud Services. See [Requirements](./common/index.html#requirements).

## <a id="rabbitmq-authentication-failure-exception"></a>"com.rabbitmq.client.AuthenticationFailureException: ACCESS_REFUSED - Login was refused using authentication mechanism PLAIN"

If you encounter the following exception message in Spring Cloud Services broker logs:

```
org.springframework.amqp.AmqpAuthenticationException:
com.rabbitmq.client.AuthenticationFailureException: ACCESS_REFUSED - Login was
refused using authentication mechanism PLAIN. For details see the broker
logfile.
```

The credentials used by the Spring Cloud Services broker to access its RabbitMQ for PCF service instance may be invalid. This can happen after restoring a backup of Pivotal Application Service (or Elastic Runtime), as a restored RabbitMQ for PCF service instance may not accept the restored credentials used by the Spring Cloud Services broker. You can update the Spring Cloud Services broker's credentials by unbinding the RabbitMQ service instance from the broker apps (the `spring-cloud-broker` and `spring-cloud-broker-worker` apps) and then rebinding.

To unbind the RabbitMQ service instance from the Spring Cloud Services broker apps and rebind it, run the following cf CLI commands:

<pre class="terminal">
$ cf target -o system -s p-spring-cloud-services
$ cf unbind-service spring-cloud-broker spring-cloud-broker-rmq
$ cf unbind-service spring-cloud-broker-worker spring-cloud-broker-rmq
$ cf bind-service spring-cloud-broker spring-cloud-broker-rmq
$ cf restage spring-cloud-broker
$ cf bind-service spring-cloud-broker-worker spring-cloud-broker-rmq
$ cf restage spring-cloud-broker-worker
</pre>

If the PCF foundation is newly restored and the RabbitMQ service instance's queues are empty, you may also unbind the RabbitMQ service instance from the broker apps, delete it, create a new instance, and then bind that instance to the Spring Cloud Services broker apps.

<p class="note warning"><strong>WARNING: </strong> Deleting and replacing the RabbitMQ service instance will destroy any data in the instance's queues. If the RabbitMQ service instance contains messages and is on a production system, unbind and rebind it instead.</p>

To delete and replace the RabbitMQ service instance used by the Spring Cloud Services broker apps, run the following cf CLI commands:

<pre class="terminal">
$ cf target -o system -s p-spring-cloud-services
$ cf unbind-service spring-cloud-broker spring-cloud-broker-rmq
$ cf unbind-service spring-cloud-broker-worker spring-cloud-broker-rmq
$ cf delete-service -f spring-cloud-broker-rmq
$ cf create-service p-rabbitmq standard spring-cloud-broker-rmq
$ cf bind-service spring-cloud-broker spring-cloud-broker-rmq
$ cf restage spring-cloud-broker
$ cf bind-service spring-cloud-broker-worker spring-cloud-broker-rmq
$ cf restage spring-cloud-broker-worker
</pre>
