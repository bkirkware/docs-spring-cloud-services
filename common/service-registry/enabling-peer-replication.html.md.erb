---
title: Enabling Peer Replication
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

You can configure a Service Registry service instance to replicate service registrations with a peer Service Registry service instance. This functionality supports two models:

* **Peer replication across separate [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) foundations:** you can configure peer replication to allow access to services registered with a Service Registry service instance in a PCF foundation located in a separate datacenter.
* **Peer replication across PCF orgs and spaces:** you can configure peer replication to allow access to services registered with a Service Registry service instance in another org or space within the same PCF foundation.

For information about the configuration parameters used to enable peer replication for a Service Registry service instance, see the [Configuration Parameters](#configuration-parameters) section.

## <a id="configuration-parameters"></a>Configuration Parameters

To enable peer replication for a Service Registry service instance, you must specify the peer Service Registry instance's URI using the `peers` JSON array, which contains an object for each Service Registry peer. You can find a Service Registry service instance's URI on its dashboard (see [Using the Dashboard](./using-the-dashboard.html)).

A Service Registry peer can be expressed as shown in the following JSON:

```
{
  "peers": [
    { "uri": "https://eureka-e280160b-d3e3-41ad-93a6-479f9b298ca6.example.net" }
  ]
}
```

Peer URIs must use the HTTPS URI scheme (as `https://`) and must follow the format `https://eureka-GUID.APPLICATION_DOMAIN.TLD`, where `GUID` is the GUID assigned to a Service Registry service instance and `APPLICATION_DOMAIN.TLD` is the application domain of the PCF foundation where that Service Registry service instance is running.

Spring Cloud Services will by default validate the SSL certificate on each peer. You can disable this validation for a given peer by setting the `skipSslValidation` parameter to `true` for that peer, as shown in the following JSON:

```
{
  "peers": [
    { "uri": "https://eureka-41562ac7-b6a6-4dc2-8a34-c1f94e82c83d.example.net",
      "skipSslValidation": true }
  ]
}
```

<p class='note'><strong>Note</strong>: If you disable certificate validation for a Service Registry service instance's peer, you may need to set the <code>TRUST_CERTS</code> environment variable on apps bound to that Service Registry service instance or to the peer. See the <a href="./writing-client-applications.html#peers-with-self-signed-certificates">Service Registry Peers with Self-Signed Certificates</a> section of <a href="./writing-client-applications.html">Writing Client Applications</a> for more information.</p>

The parameters used to configure a peer for the Service Registry are listed below.

| Parameter                                  | Function                                                                                                                                              |
|--------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>peers[i].uri</code>                  | The URI of the Service Registry peer                                                                                                                  |
| <code>peers[i].skipSslValidation</code>    | Whether to skip SSL validation for the Service Registry peer. Valid values are <code>true</code> and <code>false</code> (default: <code>false</code>) |
| <code>peers[i].peer-timeout</code> | In milliseconds, the timeout used when connecting to the peer                                                    |

To create or update a Service Registry service instance to replicate a registry with a peer service instance, allowing for validation of the peer's SSL certificate and setting a peer connection timeout of 2,000 milliseconds, run one of the following commands:

<pre class="terminal">
$ cf create-service p-service-registry standard service-registry -c '{ "peers": [ {"uri": "https://eureka-e280160b-d3e3-41ad-93a6-479f9b298ca6.example.net", "peer-timeout": 2000 } ] }'

$ cf update-service service-registry -c '{ "peers": [ {"uri": "https://eureka-e280160b-d3e3-41ad-93a6-479f9b298ca6.example.net", "peer-timeout": 2000 } ] }'
</pre>

To create or update a Service Registry service instance to replicate a registry with a peer service instance, skipping validation of the peer's SSL certificate, run one of the following commands:

<pre class="terminal">
$ cf create-service p-service-registry standard service-registry -c '{ "peers": [ {"uri": "https://eureka-e280160b-d3e3-41ad-93a6-479f9b298ca6.example.net", "skipSslValidation": true} ] }'

$ cf update-service service-registry -c '{ "peers": [ {"uri": "https://eureka-e280160b-d3e3-41ad-93a6-479f9b298ca6.example.net", "skipSslValidation": true} ] }'
</pre>

For an example of configuring peer replication across two Service Registry service instances, see the [Setting Up Peer Service Instances](#setting-up-peer-service-instances) section.

<p class='note'><strong>Important</strong>: If you provide a peer URI which does not correspond to an available Service Registry service instance (for example if there is a typo in the URI) or do not disable SSL certificate validation for a peer whose certificate cannot be verified, the <code>cf create-service</code> or <code>cf update-service</code> command may run successfully and the service instance status may be set to <code>create succeeded</code> or <code>update succeeded</code>, but the peer will not be used by the Service Registry service instance. In such a case, an error will appear on the Service Registry dashboard. See the <a href="#error-conditions">Error Conditions</a> section for more information.</p>

## <a id="configuration-validation"></a>Configuration Validation

A peer service instance URI is expected to meet the following criteria:

* Use the HTTPS URI scheme (begin with `https://`). You cannot create or update a Service Registry service instance with a peer URI which does not use the HTTPS URI scheme.
* Follow the pattern `https://eureka-GUID.APPLICATION_DOMAIN.TLD`, where `GUID` is the GUID belonging to the peer service instance and `APPLICATION_DOMAIN.TLD` is the application domain of the PCF foundation on which that service instance is hosted. You cannot create or update a Service Registry service instance with a peer URI which does not follow this pattern.
* Correspond to an available Service Registry service instance. If you create or update a Service Registry service instance with a peer URI which does not correspond to another available service instance, you will see [an error message on the Service Registry dashboard](#peer-not-found).

A peer service instance is expected to meet the following criteria:

* Have the same High Availability (HA) node count as its peer service instance. If you create or update a Service Registry service instance with a peer which has a different HA node count, you will see [an error message on the Service Registry dashboard](#peer-node-count-difference). See the [Configuration Parameters](./managing-service-instances.html#configuration-parameters) section of [Managing Service Instances](./managing-service-instances.html) for more information about setting the HA node count for a Service Registry service instance.
* Have a peer list equivalent to its peer service instance's peer list. If you create or update a Service Registry service instance with a peer that does has not have an equivalent peer list, you will see [a warning message on the Service Registry dashboard](#peer-list-difference).
* Be at the same Service Registry version as its peer service instance. If you create or update a Service Registry service instance with a peer which is at a different Service Registry version, you will see [a warning message on the Service Registry dashboard](#peer-version-difference).

## <a id="setting-up-peer-service-instances"></a>Setting Up Peer Service Instances

If you wish to have two Service Registry service instances replicate a registry, you must configure each to have the other as a peer. If one service instance Service Registry A has a Service Registry B configured as a peer and B has no peers configured, A will share service registrations with B but B will not share registrations with A.

To configure two-way peer replication for two Service Registry service instances, follow the steps below.

1. Create a Service Registry service instance A, without peers.

    ```
    $ cf create-service p-service-registry standard service-registry
    ```

1. Visit A's dashboard and copy its server URL.

    <%= image_tag(vars.scs_sr_replication_img_copy_url) %>

1. In the other PCF foundation, org, or space, create a Service Registry service instance B, with A as a peer.

    ```
    $ cf create-service p-service-registry standard service-registry-2 -c '{ "peers": [ { "uri": "https://eureka-dda7d2ac-8f9f-4d06-b8e3-9ce5b82b930e.example.com" } ] }'
    ```

1. Visit B's dashboard and copy its server URL. You will see a warning message on B's dashboard, because B currently has A as a peer and A currently has no peers.

    <%= image_tag(vars.scs_sr_replication_img_copy_peer_url) %>

1. Update A, providing B as a peer.

    ```
    $ cf update-service service-registry -c '{ "peers": [ { "uri": "https://eureka-5b251b82-672f-467b-8171-68e7948e6964.example.org" } ] }'
    ```

    A and B are now configured to replicate service registrations with each other.

## <a id="error-conditions"></a>Error Conditions

The Service Registry dashboard may show error or warning messages depending on the configuration and status of the service instance's peer configuration. See the below sections for more information.

### <a id="peer-not-found"></a>Peer Service Instance Not Found (404)

If you have configured a Service Registry service instance with a peer service instance URI that does not correspond to an available Service Registry service instance, you may see the following error message on the dashboard:

<%= image_tag(vars.scs_sr_replication_img_peer_not_found) %>

Double-check the URI of the peer listed in the error message. This can occur (for example) when there is a mistyped URI or when the service instance corresponding to the URI has been deleted.

### <a id="peer-cert-not-verified"></a>Peer Service Instance SSL Certificate Not Verified

If you have configured a Service Registry service instance with a peer service instance that uses a self-signed SSL certificate and have not disabled certificate validation for the peer service instance, you may see the following error message on the dashboard:

<%= image_tag(vars.scs_sr_replication_img_cert_not_verified) %>

To enable the Service Registry service instance to replicate a registry with this peer service instance without a secure connection, you can update the configuration for this Service Registry service instance to disable SSL certificate validation for the peer. See the [Configuration Parameters](#configuration-parameters) section for more information about configuring peer replication without SSL certificate validation.

### <a id="peer-node-count-difference"></a>Peer Service Instance Node Count Difference

If you have configured a Service Registry service instance with a peer service instance and the two service instances have differing High Availability (HA) node counts, you may see the following error message on the dashboard:

<%= image_tag(vars.scs_sr_replication_img_different_node_counts) %>

You can update one of the service instances to add or remove nodes so that the two service instances have consistent node counts. See the [Configuration Parameters](./managing-service-instances.html#configuration-parameters) section of [Managing Service Instances](./managing-service-instances.html) for more information.

### <a id="peer-list-difference"></a>Peer Service Instance Peer List Difference

If you have configured a Service Registry service instance with a peer service instance and the two service instances have differing lists of peer service instances, you may see the following message on the dashboard:

<%= image_tag(vars.scs_sr_replication_img_different_peer_list) %>

Update the configuration for this Service Registry service instance or for the peer instance to give them consistent peer lists.

### <a id="peer-version-difference"></a>Peer Service Instance Version Difference

If you have configured a Service Registry service instance with a peer service instance that is at a different version (for example, that has not been upgraded after an upgrade of the Spring Cloud Services product), you may see the following message on the dashboard:

<%= image_tag(vars.scs_sr_replication_img_version_difference) %>

You can upgrade the older of the service instances so that the peers are at consistent versions. See [Service Instance Upgrades](../service-instance-upgrades.html) for more information.
