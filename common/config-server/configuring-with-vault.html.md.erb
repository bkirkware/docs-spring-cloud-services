---
title: Configuring with Vault
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

## <a id="overview"></a>Overview

[HashiCorp Vault](https://www.vaultproject.io) is a secrets management tool, which encrypts and stores credentials, API keys, and other secrets for use in distributed systems. It provides support for access control lists, secret revocation, auditing, and leases and renewals, and includes special capabilities for common infrastructure and systems such as AWS, MySQL, and RabbitMQ, among others. For more information about Vault, see the [documentation](https://www.vaultproject.io/docs/index.html).

Spring Cloud Config provides a Vault backend so that the Spring Cloud Config Server can serve configuration stored in Vault. The Spring Cloud Services Config Server supports this backend and can serve configuration stored in Vault to client apps which have been given access to the Vault server (this includes provision of a Vault access token for the client app).

<p class='note'><strong>Important</strong>: Spring Cloud Services does not provide a HashiCorp Vault server. You must provide your own Vault server in order to use Config Server with Vault.</p>

See below for information about configuring a Config Server service instance to use a HashiCorp Vault server for a configuration source.

## <a id="general-configuration"></a>General Configuration

Parameters used to configure a configuration source are part of a JSON object called `vault`, as in `{"vault": { "host": "127.0.0.1", "port": "8200" } }`.

<p class='note'><strong>Important</strong>: The Spring Cloud Services Config Server supports only one Vault backend, so only one <code>vault</code> object is permitted in the configuration parameters.</p>

General parameters used to configure a Config Server configuration source are listed below.

| Parameter                      | Function                                                                                                   |
|--------------------------------|------------------------------------------------------------------------------------------------------------|
| <code>host</code>              | The host of the Vault server                                                                               |
| <code>port</code>              | The port of the Vault server                                                                               |
| <code>scheme</code>            | The URI scheme used in accessing the Vault server (default value: `http`)                                  |
| <code>kvVersion</code>         | The Vault API version to use (values `1` or `2`). (default value: `1`)                                     |
| <code>backend</code>           | The name of the Vault backend from which to retrieve configuration (default value: `secret`)               |
| <code>defaultKey</code>        | The default key from which to retrieve configuration (default value: `application`)                        |
| <code>profileSeparator</code>  | The value used to separate profiles (default value: `,`)                                                   |
| <code>skipSslValidation</code> | Whether to skip validation of the SSL certificate on the Vault server. Valid values are `true` and `false` |

The value of `defaultKey` is masked in the Config Server dashboard.

For information about writing a client app that accesses configuration values from a Config Server which has been configured to use Vault, see the [Use a HashiCorp Vault Server](./writing-client-applications.html#use-a-hashicorp-vault-server) section of [Writing Client Applications](./writing-client-applications.html).

## <a id="proxy-repository-access"></a>HTTP(S) Proxy Repository Access

You can configure a Config Server service instance to access a configuration source using an HTTP or HTTPS proxy. To do so, you must provide proxy settings in either of the `vault.proxy.http` or `vault.proxy.https` JSON objects. You can set the proxy host and port, the proxy username and password (if applicable), and a list of hosts which the Config Server should access outside of the proxy.

Settings for an HTTP proxy are set in the `vault.proxy.http` object. These might be set as shown in the following command:

```
cf create-service p-config-server standard config-server -c '{"vault": { "proxy": { "http": { "host": "proxy.example.com", "port": "80" } } } }'
```

Settings for an HTTPS proxy are set in the `vault.proxy.https` object. These might be set as shown in the following command:

```
cf create-service p-config-server standard config-server -c '{"vault": { "proxy": { "https": { "host": "secure.example.com", "port": "443" } } } }'
```

<p class='note'><strong>Note</strong>: Some networks require that separate proxy servers are used for HTTP and HTTPS URLs. In such a case, you can set both the <code>proxy.http</code> and <code>proxy.https</code> objects.</p>

The parameters used to configure HTTP or HTTPS proxy settings for the Config Server are listed below.

| Parameter                                  | Function                                                                                                                                            |
|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>proxy.http</code>                    | A proxy object, containing HTTP proxy fields                                                                                                        |
| <code>proxy.http.host</code>               | The HTTP proxy host                                                                                                                                 |
| <code>proxy.http.port</code>               | The HTTP proxy port                                                                                                                                 |
| <code>proxy.http.nonProxyHosts</code>      | The hosts to access outside the HTTP proxy                                                                                                          |
| <code>proxy.http.username</code>           | The username to use with an authenticated HTTP proxy                                                                                                |
| <code>proxy.http.password</code>           | The password to use with an authenticated HTTP proxy                                                                                                |
| <code>proxy.https</code>                   | A proxy object, containing HTTPS proxy fields                                                                                                       |
| <code>proxy.https.host</code>              | The HTTPS proxy host                                                                                                                                |
| <code>proxy.https.port</code>              | The HTTPS proxy port                                                                                                                                |
| <code>proxy.https.nonProxyHosts</code>     | The hosts to access outside the HTTPS proxy (if <code>proxy.http.nonProxyHosts</code> is also provided, <code>http.nonProxyHosts</code> will be used instead of <code>https.nonProxyHosts</code>)      |
| <code>proxy.https.username</code>          | The username to use with an authenticated HTTPS proxy (if <code>proxy.http.username</code> is also provided, <code>http.username</code> will be used instead of <code>https.username</code>) |
| <code>proxy.https.password</code>          | The password to use with an authenticated HTTPS proxy (if <code>proxy.http.password</code> is also provided, <code>http.password</code> will be used instead of <code>https.password</code>) |

To configure a Config Server service instance that uses an HTTP proxy to access a configuration source, use the following command:

```
cf create-service p-config-server standard config-server -c '{"vault": { "host": "127.0.0.1", "port": "8200", "proxy": { "http": { "host": "proxy.example.com", "port": "80" } } } }'
```

To configure a Config Server service instance that uses an authenticated HTTPS proxy to access a configuration source, specifying that `example.com` should be accessed outside of the proxy, use the following command:

```
cf create-service p-config-server standard config-server -c '{"vault": { "host": "127.0.0.1", "port": "8200", "proxy": { "https": { "host": "secure.example.com", "port": "443", "username": "jim", "password": "wright62", "nonProxyHosts": "example.com" } } } }'
```
